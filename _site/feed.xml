<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-22T14:22:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">스존 공부노트</title><subtitle>기껏 공부한 것 흘리지 않고 주워 담기</subtitle><author><name>Szonne</name></author><entry><title type="html">Singly Linked List (단순연결리스트)</title><link href="http://localhost:4000/data-structure/singly-linked-list/" rel="alternate" type="text/html" title="Singly Linked List (단순연결리스트)" /><published>2024-12-22T00:00:00+09:00</published><updated>2024-12-22T00:00:00+09:00</updated><id>http://localhost:4000/data-structure/singly-linked-list</id><content type="html" xml:base="http://localhost:4000/data-structure/singly-linked-list/"><![CDATA[<h2 id="단순-연결-리스트-singly-linked-list">단순 연결 리스트 (Singly Linked List)</h2>

<p>단순 연결 리스트는 동적 메모리 할당을 이용하여 노드들을 한 방향으로 연결하여 리스트를 구현하는 자료구조다.</p>

<p>단순 연결 리스트의 경우 단 방향으로 노드들이 연결되어 있기 때문에 삽입이나 삭제 시에 노드들의 이동이 필요하지 않다. 삽입과 삭제 시에는 기존 노드의 앞, 뒤 노드만 적절히 처리해주면 된다. 이 자료구조의 단점은 탐색 시에 항상 첫 노드부터 원하는 노드를 찾을 때까지 순차 탐색(Sequential Search)을 해야한다는 점이다.</p>

<h3 id="구현-python">구현 (Python)</h3>

<p>연결리스트를 <code class="language-plaintext highlighter-rouge">Python</code>으로 구현하려면 필요한 기능들은 다음과 같다.</p>
<ul>
  <li>노드는 데이터와 다음 노드를 가리키는 포인터로 구성
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">link</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
    <span class="bp">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">link</span>
</code></pre></div>    </div>
  </li>
  <li>연결 리스트 클래스 정의
    <ul>
      <li>리스트의 크기를 출력하는 함수</li>
      <li>리스트가 비어있는지 확인하는 함수</li>
      <li>리스트의 맨 앞으로 노드를 추가하는 함수</li>
      <li>리스트의 특정 노드 뒤로 새 노드를 추가하는 함수</li>
      <li>리스트의 맨 앞 노드를 삭제하는 함수</li>
      <li>리스트의 특정 노드 뒤에 있는 노드를 삭제하는 함수</li>
      <li>순차 탐색하는 함수</li>
      <li>연결 리스트를 모두 출력하는 함수</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SList</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_size</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>
  
    <span class="o">@</span><span class="nb">property</span>
    <span class="k">def</span> <span class="nf">size</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_size</span>
  
    <span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_size</span> <span class="o">==</span> <span class="mi">0</span>
          
    <span class="k">def</span> <span class="nf">insert_at_front</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_empty</span><span class="p">():</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">prev_link</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">prev_link</span><span class="p">)</span>
              
        <span class="bp">self</span><span class="p">.</span><span class="n">_size</span> <span class="o">+=</span> <span class="mi">1</span>
      
    <span class="k">def</span> <span class="nf">insert_after</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
        <span class="c1"># 기존에 가리키던 node를 데이터 변수에 저장
</span>        <span class="n">original_next_node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
          
        <span class="c1"># 새 노드 생성
</span>        <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">original_next_node</span><span class="p">)</span>
          
        <span class="c1"># 새로 생성한 노드를 삽입
</span>        <span class="n">link</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span>
          
        <span class="bp">self</span><span class="p">.</span><span class="n">_size</span> <span class="o">+=</span> <span class="mi">1</span>
          
    <span class="k">def</span> <span class="nf">delete_at_front</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_empty</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">'Empty list'</span><span class="p">)</span>
          
        <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>
          
        <span class="bp">self</span><span class="p">.</span><span class="n">_size</span> <span class="o">-=</span> <span class="mi">1</span>
      
    <span class="k">def</span> <span class="nf">delete_after</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
        <span class="n">original_next_node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
          
        <span class="n">link</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">original_next_node</span><span class="p">.</span><span class="nb">next</span>
          
        <span class="bp">self</span><span class="p">.</span><span class="n">_size</span> <span class="o">-=</span> <span class="mi">1</span>
          
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_empty</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">'Empty list'</span><span class="p">)</span>
          
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">size</span><span class="p">):</span>
            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">data</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">i</span>
  
            <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>
          
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
      
    <span class="k">def</span> <span class="nf">print_list</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_empty</span><span class="p">():</span>
            <span class="k">return</span> <span class="bp">None</span>
          
        <span class="n">cur</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
          
        <span class="k">while</span> <span class="n">cur</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">cur</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="s">' -&gt; '</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
                  
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="nb">next</span>
  
</code></pre></div>    </div>
  </li>
  <li>간단한 예시 실행 결과
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list_</span><span class="o">=</span> <span class="n">SList</span><span class="p">()</span>
<span class="n">list_</span><span class="p">.</span><span class="n">insert_front</span><span class="p">(</span><span class="s">'A'</span><span class="p">)</span>
<span class="n">list_</span><span class="p">.</span><span class="n">insert_front</span><span class="p">(</span><span class="s">'B'</span><span class="p">)</span>
<span class="n">list_</span><span class="p">.</span><span class="n">insert_front</span><span class="p">(</span><span class="s">'C'</span><span class="p">)</span>
<span class="n">list_</span><span class="p">.</span><span class="n">print_list</span><span class="p">()</span>
  
<span class="c1"># C  -&gt; B  -&gt; A
</span>  
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"B는 리스트의 </span><span class="si">{</span><span class="n">list_</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">'B'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s"> 번째 위치함."</span><span class="p">)</span>
<span class="c1"># B는 리스트의 2 번째 위치함.
</span>  
<span class="c1"># 1을 B 다음에 추가
</span><span class="n">list_</span><span class="p">.</span><span class="n">insert_after</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">list_</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">)</span>
  
<span class="n">list_</span><span class="p">.</span><span class="n">print_list</span><span class="p">()</span>
<span class="c1"># C  -&gt; B  -&gt; 1  -&gt; A
</span></code></pre></div>    </div>
  </li>
</ul>

<p>이름 그대로 단순 연결 리스트의 특징은 데이터들이 서로 연결되어 있다는 점이다. 이러한 특성은 단순 연결 리스트가 여러 가지 장,단점을 갖는 이유가 된다.</p>

<h3 id="장점">장점</h3>
<ul>
  <li>동적 메모리 관리
    <ul>
      <li>최초 선언 시에 데이터 크기를 설정해야 하는 배열과 다르게, 사용할 때 필요에 맞춰 데이터 크기를 추가하거나 삭제할 수 있다.
고정된 크기의 배열과 다르게 불필요하게 낭비되는 메모리를 줄일 수 있다.</li>
    </ul>
  </li>
  <li>데이터 추가 및 삭제 용이
    <ul>
      <li>배열은 중간에 있는 특정 데이터를 삭제하거나 새로 추가하려면 기존의 다른 엘리먼트들을 모두 새롭게 이동시켜야 한다. 하지만, 단순 연결 리스트의 경우 데이터 삭제나 추가에 맞춰 포인터(연결되는 지점)만 적절하게 수정하면 된다.</li>
      <li>배열의 크기가 아주 클 경우, 데이터를 새로 추가하거나 삭제하는 작업이 비효율적이다. 예를 들어, 백만 개의 원소가 있는 배열에서 가장 처음에 새로운 데이터를 추가하려면 총 백만 개의 원소를 이동시켜야 한다. 그러나 단순 연결 리스트는 포인터만 처리해주면 데이터 조작이 훨씬 간단하다.</li>
    </ul>
  </li>
</ul>

<h3 id="단점">단점</h3>
<ul>
  <li>불안정한 구조
    <ul>
      <li>포인터 연결을 적절하게 하지 못하면 데이터 유실 또는 잘못된 자료 구조가 될 수 있다.</li>
    </ul>
  </li>
  <li>데이터 접근의 비효율성
    <ul>
      <li>배열은 인덱스를 통해 데이터를 O(1) 시간 복잡도로 접근할 수 있지만, 단순 연결 리스트는 원하는 데이터가 나올 때까지 순차 탐색을 계속해야 한다. 시간 복잡도는 O(n)으로 배열에 비해 비효율적이다.
역방향 탐색이 불가능하다.</li>
    </ul>
  </li>
  <li>포인터 정보 저장을 위한 메모리 오버헤드
    <ul>
      <li>연결 리스트는 원소뿐만 아니라 포인터 정보도 같이 저장해야 하므로, 연결 리스트의 크기가 커질수록 메모리 오버헤드가 커진다.</li>
    </ul>
  </li>
</ul>]]></content><author><name>Szonne</name></author><category term="data-structure" /><category term="data-structure" /><summary type="html"><![CDATA[단순 연결 리스트 (Singly Linked List)]]></summary></entry></feed>